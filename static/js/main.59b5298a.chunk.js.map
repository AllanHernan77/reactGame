{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","playGame","replay","LETTERS","animations","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","gameOn","main","document","getElementById","scoreElement","lifeElement","lives","score","create","idx","Math","floor","random","length","container","createElement","letter","letterText","textContent","appendChild","animation","animate","transform","duration","easing","fill","splice","element","onfinish","char","pop","classList","add","setupNextLetter","setTimeout","body","addEventListener","key","toLowerCase","popped","pause","querySelector","opacity","id","window","onload","button","getElementsByTagName","remove","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.59b5298a.chunk.js","sourcesContent":["import './App.css';\nfunction App() {\n// when using JSX, we can use vanilla JS, but calling it in react is different\n// here, outside the return function we are using vanilla JS, so everything is \n// imported from the orginal game to here. Same functionality and code.\n\n\n\n//nested functions to access variables within thier scopes so that we do not need to declare global variables\n  function playGame(replay){\n    var LETTERS = [\n      \"a\",\n      \"b\",\n      \"c\",\n      \"d\",\n      \"e\",\n      \"f\",\n      \"g\",\n      \"h\",\n      \"i\",\n      \"j\",\n      \"k\",\n      \"l\",\n      \"m\",\n      \"n\",\n      \"o\",\n      \"p\",\n      \"q\",\n      \"r\",\n      \"s\",\n      \"t\",\n      \"u\",\n      \"v\",\n      \"w\",\n      \"x\",\n      \"y\",\n      \"z\"\n    ];\n    var animations = {\n      a: [],\n      b: [],\n      c: [],\n      d: [],\n      e: [],\n      f: [],\n      g: [],\n      h: [],\n      i: [],\n      j: [],\n      k: [],\n      l: [],\n      m: [],\n      n: [],\n      o: [],\n      p: [],\n      q: [],\n      r: [],\n      s: [],\n      t: [],\n      u: [],\n      v: [],\n      w: [],\n      x: [],\n      y: [],\n      z: []\n    };\n\n    var gameOn = true;\n    var timeOffset = 2000; //interval between letters starting, will be faster over time\n    var main = document.getElementById(\"main\");\n    var scoreElement = document.getElementById(\"score\");\n    var lifeElement = document.getElementById(\"misses\");\n    var lives = 5;\n    var score = 0;\n    \n    \n    function create() {\n\n      var idx = Math.floor(Math.random() * LETTERS.length); // retrive a random index from the word array\n      var x = Math.random() * 80 + \"vw\"; // value that expands from the entire width of the screen with a vw value \n      var container = document.createElement(\"div\");\n      var letter = document.createElement(\"span\");\n      var letterText = document.createElement(\"p\");\n      letterText.textContent = LETTERS[idx];\n      letter.appendChild(letterText);\n      container.appendChild(letter);\n      main.appendChild(container);\n    \n  \n  \n\n    var animation = container.animate( //div animation now has an animate interface\n      [                   \n        { transform: \"translate3d(\" + x + \",-2.5vh , 0)\" }, //x y and z \n        { transform: \"translate3d(\" + x + \",82.5vh, 0)\" } // points at which it is going to stop\n      ],\n      {\n        duration: 2000,\n        easing: \"linear\",\n        fill: \"both\"\n      }\n    );\n\n    animations[LETTERS[idx]].splice(0, 0, {\n      animation: animation,\n      element: container\n    });\n\n\n    //If an animation finishes, we will consider that as a miss, so we will remove it from the active animations array and increment our miss count\n    animation.onfinish = function (e) {\n      var target = container;\n      var char = target.textContent;\n\n      animations[char].pop();\n      handleMisses();\n    };\n\n\n\n\n    }\n\n   //When a miss is registered, check if we have reached the max number of misses\n    function handleMisses() {\n      lives--;\n      lifeElement.textContent = \"Lives \" + lives;\n  \n      if (lives === 0){\n        gameOver();\n      }\n  \n    }\n   //End game and show screen\n    function gameOver() {\n      gameOn = false;\n   \n      document.getElementById(\"game-over\").classList.add(\"endScreen\");\n    }\n  //start the falling letters... create the element+animation, and setup timeout for next letter to start\n    function setupNextLetter() {\n      if (gameOn) {\n        create();\n        setTimeout(function () {\n          setupNextLetter();\n        }, timeOffset);\n      }\n    }\n    setupNextLetter();\n\n    //key press function forked from above \n    function onPress(e) {\n      var char = e.key;\n      if (char.length === 1) {\n        char = char.toLowerCase();\n        if (animations[char] && animations[char].length) {\n          var popped = animations[char].pop();\n          popped.animation.pause();\n          var target = popped.element.querySelector(\"p\");\n          target.animate(\n            [\n              {\n                opacity: 1\n              },\n              {\n                opacity: 0\n              }\n            ],\n            {\n              easing: \"ease-out\",\n              fill: \"both\"\n            }\n          );\n          addScore();\n        }\n      }\n    }\n    \n    //increments score \n  function addScore() {\n    score++;\n    scoreElement.textContent = \"Score \"+ score;\n  }\n  document.body.addEventListener(\"keypress\", onPress);\n\n\n  }\n\n  function loadGame() {\n\n    var button = document.getElementsByTagName(\"button\")[0];\n    button.textContent = \"Start Game\";\n    button.addEventListener(\"click\", function beginGame(e) {\n    button.remove(); // remove the start button\n    playGame()\n  });\n\n}\n  \n  return (\n    // returning a main tag to the root, which is also a main tag\n    <main>\n        <main>\n            <button id=\"button\">Start Game</button>\n        </main>      \n\n    <div id=\"theNav\">\n        <nav>\n          <div id=\"misses\">Lives 5</div>\n          <div id=\"score\">Score 0</div>\n        </nav>\n      </div>\n\n      <div id=\"game-over\">\n        <p>Game Over</p>\n      </div>\n    \n     { window.onload= loadGame} {/* A JSX call for load game,we have to wait for the contens to load first aswell */}  \n      </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('main')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}